var cov_1tglkjiy9e=function(){var path='/Users/ralfcheung/routes/config/connection.js',hash='2c0a150ec8e8c7fd713aab627a738ba0f5261bfb',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/ralfcheung/routes/config/connection.js',statementMap:{'0':{start:{line:1,column:12},end:{line:1,column:28}},'1':{start:{line:2,column:17},end:{line:2,column:36}},'2':{start:{line:3,column:17},end:{line:3,column:46}},'3':{start:{line:4,column:15},end:{line:4,column:34}},'4':{start:{line:6,column:16},end:{line:13,column:1}},'5':{start:{line:16,column:0},end:{line:16,column:46}},'6':{start:{line:17,column:0},end:{line:17,column:50}},'7':{start:{line:18,column:0},end:{line:18,column:57}},'8':{start:{line:20,column:0},end:{line:20,column:42}},'9':{start:{line:22,column:0},end:{line:22,column:50}},'10':{start:{line:24,column:0},end:{line:29,column:3}},'11':{start:{line:25,column:2},end:{line:25,column:44}},'12':{start:{line:26,column:2},end:{line:26,column:24}},'13':{start:{line:27,column:2},end:{line:27,column:47}},'14':{start:{line:31,column:0},end:{line:32,column:52}},'15':{start:{line:34,column:0},end:{line:38,column:3}},'16':{start:{line:35,column:2},end:{line:35,column:44}},'17':{start:{line:36,column:2},end:{line:36,column:47}},'18':{start:{line:40,column:0},end:{line:41,column:54}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:24,column:23},end:{line:24,column:24}},loc:{start:{line:24,column:34},end:{line:29,column:1}},line:24},'1':{name:'(anonymous_1)',decl:{start:{line:34,column:30},end:{line:34,column:31}},loc:{start:{line:34,column:41},end:{line:38,column:1}},line:34}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0},f:{'0':0,'1':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const env=(cov_1tglkjiy9e.s[0]++,require('./env'));const mongoose=(cov_1tglkjiy9e.s[1]++,require('mongoose'));const configDB=(cov_1tglkjiy9e.s[2]++,require('./database.js')(env));const logger=(cov_1tglkjiy9e.s[3]++,require('./logger'));const options=(cov_1tglkjiy9e.s[4]++,{native_parser:true,poolSize:5,user:env[process.env.NODE_ENV].dbUser,pass:env[process.env.NODE_ENV].dbPassword,auto_reconnect:true// mongos: true     <- enable it for scaling
});cov_1tglkjiy9e.s[5]++;console.log(env[process.env.NODE_ENV].dbUser);cov_1tglkjiy9e.s[6]++;console.log(env[process.env.NODE_ENV].dbPassword);cov_1tglkjiy9e.s[7]++;console.log(typeof env[process.env.NODE_ENV].dbPassword);cov_1tglkjiy9e.s[8]++;mongoose.connect(configDB.dbURL,options);cov_1tglkjiy9e.s[9]++;module.exports=connection=mongoose.connection;cov_1tglkjiy9e.s[10]++;connection.on('error',function(){cov_1tglkjiy9e.f[0]++;cov_1tglkjiy9e.s[11]++;logger.error('MongoDB connection error:');cov_1tglkjiy9e.s[12]++;mongoose.disconnect();// mongoose doesn't disconnect on error
cov_1tglkjiy9e.s[13]++;throw new Error('Disconnected from MongoDB');// will let PM2 restart the server
});cov_1tglkjiy9e.s[14]++;connection.on('connected',logger.info.bind(logger,'Connected to MongoDB'));cov_1tglkjiy9e.s[15]++;connection.on('disconnected',function(){cov_1tglkjiy9e.f[1]++;cov_1tglkjiy9e.s[16]++;logger.error('Disconnected from MongoDB');cov_1tglkjiy9e.s[17]++;throw new Error('Disconnected from MongoDB');// will let PM2 restart the server
});cov_1tglkjiy9e.s[18]++;connection.on('reconnected',logger.info.bind(logger,'Reconnected to MongoDB'));